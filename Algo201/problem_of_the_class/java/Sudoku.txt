Define: ArrayObj.length will return the size of the array
Define: sqrt(n:Double)->Double will return a result of square root of n
Define: printSudoku(board) will print sudoku 

Function isSafe(board:Integer[][], row:Integer,col:Integer,num:Integer) -> Boolean :
    For Let d <- 0 ; d < board.length ; d += 1 Then
        If board[row][d] == num Then
            Return False
        Endif
    Endfor

    For Let r <- 0 ; r < board.length ; r += 1 Then
        If board[r][col] == num Then
            Return False
        Endif
    Endfor

    Let sqrt <- sqrt(board.length)
    Let boxRowStart <- row - row % sqrt
    Let boxColStart <- col - col % sqrt

    For r <- boxRowStart ; r < boxRowStart + sqrt ; r += 1  Then
        For d <- boxColStart ; d < boxColStart + sqrt ; d += 1 Then
            If board[r][d] == num Then
                Return False
            Endif
        Endfor
    Endfor

Endfunction


Function solveSudoku(board:Integer[][], n:Integer) -> Boolean:
    Let row <- -1
    Let col <- -1
    Let isEmpty <- True
    
    For Let i <- 0 ; i < n ; i += 1 Then
        For Let j <- 0 ; j < n ; j += 1 Then
            If board[i][j] == 0 Then
                row <- i
                col <- j
                isEmpty <- False
                Break
            Endif
        If Not isEmpty Then
            break
        Endif
        Endfor
    Endfor

    If isEmpty Then
        Return True
    Endif

    For Let num <- 1 ; num <= n ; num += 1 Then
        If isSafe(board,row,col,num) Then
            board[row][col] <- num
            If solveSudoku(board,n) Then
                Return True
            Else
                board[row][col] <- 0
            Endif
        Endif
    Endfor
Endfunction

Start
    Let board <- { 
                { 3, 0, 6, 5, 0, 8, 4, 0, 0 }, 
                { 5, 2, 0, 0, 0, 0, 0, 0, 0 },
                { 0, 8, 7, 0, 0, 0, 0, 3, 1 }, 
                { 0, 0, 3, 0, 1, 0, 0, 8, 0 }, 
                { 9, 0, 0, 8, 6, 3, 0, 0, 5 },
                { 0, 5, 0, 0, 9, 0, 6, 0, 0 }, 
                { 1, 3, 0, 0, 0, 0, 2, 5, 0 }, 
                { 0, 0, 0, 0, 0, 0, 0, 7, 4 },
                { 0, 0, 5, 2, 0, 6, 3, 0, 0 } 
            }
    Let n = board.length

    If solveSudoku(board,n) Then
        printSudoku(board)
    Else
        Display "No solution"
    Endif
End